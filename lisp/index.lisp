;- 기본 규칙
;1. 하나의 표현식은 괄호로 시작하고 괄호로 끝난다.
;2. 기본적으로 괄호의 첫 번째 요소는 함수의 이름이고, 이어지는 값들은 함수에 전달되는 인자들이다. - 전위 표기법(Prefix Notation)
;3. S-표현식은 식이다. 따라서 리스프 인터프리터에 의해 평가되어 값이 반환된다.
(+ 3 5)

;- S-표현식을 들여쓰는 규칙
;1. 중첩 괄호가 없는 간단한 구조의 경우에는 한 줄에 작성한다.
(+ 1 2 3 4 5)
;2. 중첩 괄호가 나오는 위치에서 다음 줄에 작성하되, 동일한 입력 인자들 간의 들여쓰기 레벨을 맞추도록 한다. 
;3. 닫는 괄호에 대해서는 들여쓰기를 하지 않는다.
(+ 1
   + 2 3))
(+
 (+ 1 2)
 (+ 3 4))
(+ 1
   (+ 2
      (+ 3 4)))
(+
 (+
  (+ 1 2)
  (+ 3 4))
 5)

;- 함수 정의
;(defun 함수_이름)
;(인자1 인자2...)
;"주석"
;함수_정의)
;리스프는 동적 타입 언어다. (런타임에 타입을 검사)
;함수는 반드시 하나의 값을 반환한다. 수학에서의 함수에 기초. f(x) = x^2 + 3x + 3
(defun sum
  (x y)
  "sum x and y"
  (+ x y))
(sum 1 2)

;- 전역 변수
;defvar은 한번 값을 할당하면 값에 대한 재할당이 무시된다.
(defvar *x* 123) ;123
(defvar *x* 500) ;123
;defparameter는 할당된 값을 자유롭게 바꿀 수 있다.
(defparameter *y* 123) ;123
(defparameter *y* 500) ;500
(+ *x* 3) ;126
(+ *y* 3) ;503

;- 지역 변수
;let을 사용하면 지역 변수를 정의할 수 있다. 다음의 예시는 x라는 지역 변수에 1이란 값을 대입하고, 그 밑의 식에서 x라는 변수를 사용한다.
(let ((x 1))
  (+ x 1)) ;2
;2개 이상의 지역 변수를 선언하는 예시는 다음과 같다.
(let ((x 1)
      (y 2))
  (+ x y)) ;3
;let*을 사용하면 지역 변수에 값을 할당 시 다른 지역 변수 값을 상호 참조할 수 있다.
(let* ((a 1)
       (b 2)
       (c (+ a b)))
  c) ;3
